package extqueue

// Code generated by all_gen.go; DO NOT EDIT.

import (
	"strconv"
	"testing"

	"github.com/loov/queue/testsuite"
)

var _ testsuite.MPMC = (*MPMCcGo)(nil)
var _ testsuite.NonblockingMPMC = (*MPMCcGo)(nil)

func TestMPMCcGo(t *testing.T) {
	batchSize := 0
	for _, size := range testsuite.TestSizes {
		name := "b" + strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		t.Run(name, func(t *testing.T) { testsuite.Tests(t, func() testsuite.Queue { return NewMPMCcGo(size) }) })
	}
}

func BenchmarkMPMCcGo(b *testing.B) {
	batchSize := 0
	for _, size := range testsuite.BenchSizes {
		name := strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		b.Run(name, func(b *testing.B) { testsuite.Benchmarks(b, func() testsuite.Queue { return NewMPMCcGo(size) }) })
	}
}

var _ testsuite.MPMC = (*MPMCqGo)(nil)
var _ testsuite.NonblockingMPMC = (*MPMCqGo)(nil)

func TestMPMCqGo(t *testing.T) {
	batchSize := 0
	for _, size := range testsuite.TestSizes {
		name := "b" + strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		t.Run(name, func(t *testing.T) { testsuite.Tests(t, func() testsuite.Queue { return NewMPMCqGo(size) }) })
	}
}

func BenchmarkMPMCqGo(b *testing.B) {
	batchSize := 0
	for _, size := range testsuite.BenchSizes {
		name := strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		b.Run(name, func(b *testing.B) { testsuite.Benchmarks(b, func() testsuite.Queue { return NewMPMCqGo(size) }) })
	}
}

var _ testsuite.MPMC = (*MPMCqpGo)(nil)
var _ testsuite.NonblockingMPMC = (*MPMCqpGo)(nil)

func TestMPMCqpGo(t *testing.T) {
	batchSize := 0
	for _, size := range testsuite.TestSizes {
		name := "b" + strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		t.Run(name, func(t *testing.T) { testsuite.Tests(t, func() testsuite.Queue { return NewMPMCqpGo(size) }) })
	}
}

func BenchmarkMPMCqpGo(b *testing.B) {
	batchSize := 0
	for _, size := range testsuite.BenchSizes {
		name := strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		b.Run(name, func(b *testing.B) { testsuite.Benchmarks(b, func() testsuite.Queue { return NewMPMCqpGo(size) }) })
	}
}

var _ testsuite.SPSC = (*SPSCnsDV)(nil)
var _ testsuite.NonblockingSPSC = (*SPSCnsDV)(nil)

func TestSPSCnsDV(t *testing.T) {
	batchSize := 0
	size := 0
	name := "b" + strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
	t.Run(name, func(t *testing.T) { testsuite.Tests(t, func() testsuite.Queue { return NewSPSCnsDV() }) })
}

func BenchmarkSPSCnsDV(b *testing.B) {
	batchSize := 0
	size := 0
	name := strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
	b.Run(name, func(b *testing.B) { testsuite.Benchmarks(b, func() testsuite.Queue { return NewSPSCnsDV() }) })
}

var _ testsuite.MPSC = (*MPSCnsDV)(nil)
var _ testsuite.NonblockingMPSC = (*MPSCnsDV)(nil)

func TestMPSCnsDV(t *testing.T) {
	batchSize := 0
	size := 0
	name := "b" + strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
	t.Run(name, func(t *testing.T) { testsuite.Tests(t, func() testsuite.Queue { return NewMPSCnsDV() }) })
}

func BenchmarkMPSCnsDV(b *testing.B) {
	batchSize := 0
	size := 0
	name := strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
	b.Run(name, func(b *testing.B) { testsuite.Benchmarks(b, func() testsuite.Queue { return NewMPSCnsDV() }) })
}

var _ testsuite.MPMC = (*MPMCqsDV)(nil)
var _ testsuite.NonblockingMPMC = (*MPMCqsDV)(nil)

func TestMPMCqsDV(t *testing.T) {
	batchSize := 0
	for _, size := range testsuite.TestSizes {
		name := "b" + strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		t.Run(name, func(t *testing.T) { testsuite.Tests(t, func() testsuite.Queue { return NewMPMCqsDV(size) }) })
	}
}

func BenchmarkMPMCqsDV(b *testing.B) {
	batchSize := 0
	for _, size := range testsuite.BenchSizes {
		name := strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		b.Run(name, func(b *testing.B) { testsuite.Benchmarks(b, func() testsuite.Queue { return NewMPMCqsDV(size) }) })
	}
}

var _ testsuite.MPMC = (*MPMCqspDV)(nil)
var _ testsuite.NonblockingMPMC = (*MPMCqspDV)(nil)

func TestMPMCqspDV(t *testing.T) {
	batchSize := 0
	for _, size := range testsuite.TestSizes {
		name := "b" + strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		t.Run(name, func(t *testing.T) { testsuite.Tests(t, func() testsuite.Queue { return NewMPMCqspDV(size) }) })
	}
}

func BenchmarkMPMCqspDV(b *testing.B) {
	batchSize := 0
	for _, size := range testsuite.BenchSizes {
		name := strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		b.Run(name, func(b *testing.B) { testsuite.Benchmarks(b, func() testsuite.Queue { return NewMPMCqspDV(size) }) })
	}
}

var _ testsuite.SPMC = (*SPMCqsDV)(nil)
var _ testsuite.NonblockingSPMC = (*SPMCqsDV)(nil)

func TestSPMCqsDV(t *testing.T) {
	batchSize := 0
	for _, size := range testsuite.TestSizes {
		name := "b" + strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		t.Run(name, func(t *testing.T) { testsuite.Tests(t, func() testsuite.Queue { return NewSPMCqsDV(size) }) })
	}
}

func BenchmarkSPMCqsDV(b *testing.B) {
	batchSize := 0
	for _, size := range testsuite.BenchSizes {
		name := strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		b.Run(name, func(b *testing.B) { testsuite.Benchmarks(b, func() testsuite.Queue { return NewSPMCqsDV(size) }) })
	}
}

var _ testsuite.SPMC = (*SPMCqspDV)(nil)
var _ testsuite.NonblockingSPMC = (*SPMCqspDV)(nil)

func TestSPMCqspDV(t *testing.T) {
	batchSize := 0
	for _, size := range testsuite.TestSizes {
		name := "b" + strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		t.Run(name, func(t *testing.T) { testsuite.Tests(t, func() testsuite.Queue { return NewSPMCqspDV(size) }) })
	}
}

func BenchmarkSPMCqspDV(b *testing.B) {
	batchSize := 0
	for _, size := range testsuite.BenchSizes {
		name := strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		b.Run(name, func(b *testing.B) { testsuite.Benchmarks(b, func() testsuite.Queue { return NewSPMCqspDV(size) }) })
	}
}

var _ testsuite.SPSC = (*SPSCqsDV)(nil)
var _ testsuite.NonblockingSPSC = (*SPSCqsDV)(nil)

func TestSPSCqsDV(t *testing.T) {
	batchSize := 0
	for _, size := range testsuite.TestSizes {
		name := "b" + strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		t.Run(name, func(t *testing.T) { testsuite.Tests(t, func() testsuite.Queue { return NewSPSCqsDV(size) }) })
	}
}

func BenchmarkSPSCqsDV(b *testing.B) {
	batchSize := 0
	for _, size := range testsuite.BenchSizes {
		name := strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		b.Run(name, func(b *testing.B) { testsuite.Benchmarks(b, func() testsuite.Queue { return NewSPSCqsDV(size) }) })
	}
}

var _ testsuite.SPSC = (*SPSCqspDV)(nil)
var _ testsuite.NonblockingSPSC = (*SPSCqspDV)(nil)

func TestSPSCqspDV(t *testing.T) {
	batchSize := 0
	for _, size := range testsuite.TestSizes {
		name := "b" + strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		t.Run(name, func(t *testing.T) { testsuite.Tests(t, func() testsuite.Queue { return NewSPSCqspDV(size) }) })
	}
}

func BenchmarkSPSCqspDV(b *testing.B) {
	batchSize := 0
	for _, size := range testsuite.BenchSizes {
		name := strconv.Itoa(batchSize) + "s" + strconv.Itoa(size)
		b.Run(name, func(b *testing.B) { testsuite.Benchmarks(b, func() testsuite.Queue { return NewSPSCqspDV(size) }) })
	}
}
